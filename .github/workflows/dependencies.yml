name: Dependency Management

on:
  schedule:
    # Run dependency updates weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Update dependencies
        run: |
          case "${{ github.event.inputs.update_type || 'all' }}" in
            "security")
              source venv/bin/activate && safety check --json --output safety-report.json
              source venv/bin/activate && pip-audit --format=json --output=pip-audit-report.json
              ;;
            "major")
              poetry update --dry-run
              ;;
            "minor")
              poetry update --dry-run
              ;;
            "patch")
              poetry update --dry-run
              ;;
            "all")
              poetry update --dry-run
              ;;
          esac

      - name: Check for outdated packages
        run: |
          poetry show --outdated --json > outdated-packages.json
          cat outdated-packages.json

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: update dependencies'
          body: |
            ## Dependency Updates
            
            This PR updates project dependencies to their latest versions.
            
            ### Updated Packages
            - Check the changes below for updated packages
            
            ### Security Updates
            - Review security-related updates carefully
            
            ### Testing
            - [ ] All tests pass
            - [ ] No breaking changes introduced
            - [ ] Performance impact assessed
            
            ### Checklist
            - [ ] Dependencies updated
            - [ ] Tests passing
            - [ ] Documentation updated if needed
            - [ ] Breaking changes documented
          branch: dependency-updates
          delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run Safety check
        run: |
          source venv/bin/activate && safety check --json --output safety-report.json
          source venv/bin/activate && safety check

      - name: Run pip-audit
        run: |
          source venv/bin/activate && pip-audit --format=json --output=pip-audit-report.json
          source venv/bin/activate && pip-audit

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: |
            safety-report.json
            pip-audit-report.json

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Check licenses
        run: |
          source venv/bin/activate && pip-licenses --format=json --output-file=licenses.json
          source venv/bin/activate && pip-licenses --format=table

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
