name: Code Quality & Performance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks daily at 3 AM UTC
    - cron: '0 3 * * *'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=your-org
            -Dsonar.projectKey=archaeovault
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=pytest-report.xml

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: python

      - name: Run Radon (Code Complexity)
        run: |
          source venv/bin/activate
          radon cc app/ --json --output radon-complexity.json
          radon mi app/ --json --output radon-maintainability.json
          radon hal app/ --json --output radon-halstead.json

      - name: Run Xenon (Complexity Monitoring)
        run: |
          source venv/bin/activate
          xenon --max-absolute B --max-modules A --max-average A app/

      - name: Run Vulture (Dead Code Detection)
        run: |
          source venv/bin/activate
          vulture app/ --min-confidence 60 --exclude tests/

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            radon-complexity.json
            radon-maintainability.json
            radon-halstead.json

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run performance tests
        run: |
          source venv/bin/activate && pytest tests/performance/ \
            --benchmark-only \
            --benchmark-save=performance \
            --benchmark-save-data \
            --benchmark-histogram=performance \
            -v

      - name: Run memory profiling
        run: |
          source venv/bin/activate && python -m memory_profiler app/main.py || true

      - name: Run line profiling
        run: |
          source venv/bin/activate && kernprof -l -v app/main.py || true

      - name: Upload performance data
        uses: actions/upload-artifact@v4
        with:
          name: performance-data
          path: |
            .benchmarks/
            *.lprof
            *.prof

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Check docstring coverage
        run: |
          source venv/bin/activate && interrogate --config pyproject.toml app/

      - name: Generate documentation
        run: |
          source venv/bin/activate && sphinx-build -b html docs/ docs/_build/html

      - name: Check for broken links
        run: |
          source venv/bin/activate && linkchecker docs/_build/html/index.html || true

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  test-coverage-trend:
    name: Test Coverage Trend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          source venv/bin/activate && pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: quality
          name: codecov-quality
          fail_ci_if_error: false

      - name: Comment PR with coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./coverage.xml
          badge-title: 'Coverage'
          fail_below_min: true
          min_coverage: 80
          hide_branch_rate: false
          hide_complexity: false
          thresholds: |
            line: 80
            branch: 80
            method: 80
